# Advanced URL Validation Template
# Full-featured template with multiple environments and comprehensive error handling

name: Advanced URL Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly Monday 2 AM UTC
  workflow_dispatch:
    inputs:
      environment:
        description: 'Validation environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      target_files:
        description: 'Files to validate (default: all docs)'
        required: false
        default: 'docs/ README.md'

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

env:
  # Environment-specific configurations
  DEV_CONFIG: |
    {
      "timeout": 10,
      "retry": 2,
      "concurrency": 15,
      "allow_status": "200,202,204,301,302,429",
      "failure_threshold": 10,
      "fail_on_error": false
    }
  STAGING_CONFIG: |
    {
      "timeout": 15,
      "retry": 3,
      "concurrency": 10,
      "allow_status": "200,202,204,301,302",
      "failure_threshold": 5,
      "fail_on_error": false
    }
  PROD_CONFIG: |
    {
      "timeout": 20,
      "retry": 3,
      "concurrency": 8,
      "allow_status": "200,202,204",
      "failure_threshold": 0,
      "fail_on_error": true
    }

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      config: ${{ steps.env.outputs.config }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENV="${{ inputs.environment }}"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            ENV="production"
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            ENV="staging"
          else
            ENV="development"
          fi

          echo "environment=$ENV" >> $GITHUB_OUTPUT

          case $ENV in
            "production")
              echo "config<<EOF" >> $GITHUB_OUTPUT
              echo "$PROD_CONFIG" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "config<<EOF" >> $GITHUB_OUTPUT
              echo "$STAGING_CONFIG" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "config<<EOF" >> $GITHUB_OUTPUT
              echo "$DEV_CONFIG" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              ;;
          esac

  validate-changed-files:
    needs: determine-environment
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: Validate changed files

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: |
            **/*.md
            **/*.rst
            **/*.txt
            docs/**
          separator: ' '

      - name: Parse environment config
        id: config
        run: |
          CONFIG='${{ needs.determine-environment.outputs.config }}'
          echo "timeout=$(echo "$CONFIG" | jq -r '.timeout')" >> $GITHUB_OUTPUT
          echo "retry=$(echo "$CONFIG" | jq -r '.retry')" >> $GITHUB_OUTPUT
          echo "concurrency=$(echo "$CONFIG" | jq -r '.concurrency')" >> $GITHUB_OUTPUT
          echo "allow_status=$(echo "$CONFIG" | jq -r '.allow_status')" >> $GITHUB_OUTPUT
          echo "failure_threshold=$(echo "$CONFIG" | jq -r '.failure_threshold')" >> $GITHUB_OUTPUT
          echo "fail_on_error=$(echo "$CONFIG" | jq -r '.fail_on_error')" >> $GITHUB_OUTPUT

      - name: Validate URLs in changed files
        if: steps.changed-files.outputs.any_changed == 'true'
        id: urlcheck
        uses: simeg/urlsup-action@v2
        with:
          files: ${{ steps.changed-files.outputs.all_changed_files }}
          timeout: ${{ steps.config.outputs.timeout }}
          retry: ${{ steps.config.outputs.retry }}
          concurrency: ${{ steps.config.outputs.concurrency }}
          allow-status: ${{ steps.config.outputs.allow_status }}
          failure-threshold: ${{ steps.config.outputs.failure_threshold }}
          exclude-pattern: 'localhost|127\.0\.0\.1|staging\.|dev\.|test\.'
          allowlist: 'github.com,docs.github.com,stackoverflow.com'
          create-annotations: true
          fail-on-error: ${{ steps.config.outputs.fail_on_error }}
          user-agent: 'advanced-url-checker/1.0 (${{ needs.determine-environment.outputs.environment }}) +https://github.com/${{ github.repository }}'

      - name: Update PR with results
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const totalUrls = '${{ steps.urlcheck.outputs.total-urls }}';
            const brokenUrls = '${{ steps.urlcheck.outputs.broken-urls }}';
            const successRate = '${{ steps.urlcheck.outputs.success-rate }}';
            const environment = '${{ needs.determine-environment.outputs.environment }}';

            const emoji = brokenUrls === '0' ? '✅' : '⚠️';
            const status = brokenUrls === '0' ? 'All URLs working' : `${brokenUrls} broken URLs found`;

            const body = `## ${emoji} URL Validation Results (${environment})

            **Status:** ${status}
            **Environment:** ${environment}
            **Files checked:** ${{ steps.changed-files.outputs.all_changed_files_count }}
            **Total URLs:** ${totalUrls}
            **Success rate:** ${successRate}

            ${brokenUrls !== '0' ? '⚠️ Check workflow annotations for specific broken URLs.' : ''}
            `;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('URL Validation Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }

  validate-full-repository:
    needs: determine-environment
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    name: Full repository validation

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse environment config
        id: config
        run: |
          CONFIG='${{ needs.determine-environment.outputs.config }}'
          echo "timeout=$(echo "$CONFIG" | jq -r '.timeout')" >> $GITHUB_OUTPUT
          echo "retry=$(echo "$CONFIG" | jq -r '.retry')" >> $GITHUB_OUTPUT
          echo "concurrency=$(echo "$CONFIG" | jq -r '.concurrency')" >> $GITHUB_OUTPUT
          echo "allow_status=$(echo "$CONFIG" | jq -r '.allow_status')" >> $GITHUB_OUTPUT
          echo "failure_threshold=$(echo "$CONFIG" | jq -r '.failure_threshold')" >> $GITHUB_OUTPUT
          echo "fail_on_error=$(echo "$CONFIG" | jq -r '.fail_on_error')" >> $GITHUB_OUTPUT

      - name: Validate all URLs
        id: urlcheck
        uses: simeg/urlsup-action@v2
        with:
          files: ${{ inputs.target_files || 'docs/ README.md CHANGELOG.md' }}
          timeout: ${{ steps.config.outputs.timeout }}
          retry: ${{ steps.config.outputs.retry }}
          concurrency: ${{ steps.config.outputs.concurrency }}
          allow-status: ${{ steps.config.outputs.allow_status }}
          failure-threshold: ${{ steps.config.outputs.failure_threshold }}
          include-extensions: 'md,rst,txt,html'
          exclude-pattern: 'localhost|127\.0\.0\.1|staging\.|dev\.|test\.|example\.com'
          allowlist: 'github.com,docs.github.com,stackoverflow.com,developer.mozilla.org'
          create-annotations: true
          fail-on-error: ${{ steps.config.outputs.fail_on_error }}
          user-agent: 'advanced-url-checker/1.0 (${{ needs.determine-environment.outputs.environment }}) +https://github.com/${{ github.repository }}'

      - name: Create issue for broken links (production only)
        if: |
          needs.determine-environment.outputs.environment == 'production' &&
          steps.urlcheck.outputs.broken-urls != '0' &&
          github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const brokenCount = '${{ steps.urlcheck.outputs.broken-urls }}';
            const totalCount = '${{ steps.urlcheck.outputs.total-urls }}';
            const successRate = '${{ steps.urlcheck.outputs.success-rate }}';

            const body = `## 🚨 Production URL Validation Failed

            **Critical**: Broken links detected in production environment.

            ### Summary
            - **Environment:** Production
            - **Total URLs:** ${totalCount}
            - **Broken URLs:** ${brokenCount}
            - **Success Rate:** ${successRate}

            ### Immediate Actions Required
            1. Review [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Fix broken links immediately
            3. Consider hotfix deployment if critical

            ### Details
            - **Trigger:** Scheduled validation
            - **Date:** ${new Date().toISOString()}
            - **Commit:** ${{ github.sha }}

            This is an automated alert for production URL failures.`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 CRITICAL: ${brokenCount} Broken URLs in Production`,
              body,
              labels: ['critical', 'broken-links', 'production'],
              assignees: ['@team-leads']  // Customize as needed
            });

      - name: Upload detailed report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: url-validation-report-${{ needs.determine-environment.outputs.environment }}-${{ github.run_number }}
          path: urlsup-report.json
          retention-days: 30

      - name: Summary
        run: |
          echo "## 📊 URL Validation Summary"
          echo "- **Environment:** ${{ needs.determine-environment.outputs.environment }}"
          echo "- **Total URLs:** ${{ steps.urlcheck.outputs.total-urls }}"
          echo "- **Broken URLs:** ${{ steps.urlcheck.outputs.broken-urls }}"
          echo "- **Success Rate:** ${{ steps.urlcheck.outputs.success-rate }}"

          if [ "${{ steps.urlcheck.outputs.broken-urls }}" = "0" ]; then
            echo "✅ All URLs are working correctly!"
          else
            echo "⚠️ Found broken URLs - check annotations for details"
          fi